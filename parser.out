Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    ANGLE
    BREAK
    BRUSH
    CANVAS
    COLOR
    DIFFER
    DRAW
    ELSE
    EQUALEQUAL
    FALSE
    FLOAT
    GEQUAL
    GREATER
    IF
    LCOR
    LEFT
    LEQUAL
    LESS
    LINE
    LPAREN
    MINUS
    MULTIPLY
    NILL
    NOT
    OR
    PLUS
    POP
    PUSH
    RCOR
    RIGHT
    RPAREN
    RULE
    TRUE
    WHILE

Grammar

Rule 0     S' -> Program
Rule 1     Program -> InstructionList
Rule 2     InstructionList -> Instruction END InstructionList
Rule 3     InstructionList -> Instruction END
Rule 4     Assignable -> VALUE
Rule 5     Instruction -> LSYS ID LBRACE Lsystem_body RBRACE
Rule 6     Instruction -> ID EQUAL Assignable
Rule 7     Instruction -> TYPE ID EQUAL Assignable
Rule 8     Lsystem_body -> AXIOM TWOPOINTS STRING COMMA Ls_rules
Rule 9     Ls_rules -> STRING ARROW STRING COMMA Ls_rules
Rule 10    Ls_rules -> STRING ARROW STRING

Terminals, with rules where they appear

AND                  : 
ANGLE                : 
ARROW                : 9 10
AXIOM                : 8
BREAK                : 
BRUSH                : 
CANVAS               : 
COLOR                : 
COMMA                : 8 9
DIFFER               : 
DRAW                 : 
ELSE                 : 
END                  : 2 3
EQUAL                : 6 7
EQUALEQUAL           : 
FALSE                : 
FLOAT                : 
GEQUAL               : 
GREATER              : 
ID                   : 5 6 7
IF                   : 
LBRACE               : 5
LCOR                 : 
LEFT                 : 
LEQUAL               : 
LESS                 : 
LINE                 : 
LPAREN               : 
LSYS                 : 5
MINUS                : 
MULTIPLY             : 
NILL                 : 
NOT                  : 
OR                   : 
PLUS                 : 
POP                  : 
PUSH                 : 
RBRACE               : 5
RCOR                 : 
RIGHT                : 
RPAREN               : 
RULE                 : 
STRING               : 8 9 9 10 10
TRUE                 : 
TWOPOINTS            : 8
TYPE                 : 7
VALUE                : 4
WHILE                : 
error                : 

Nonterminals, with rules where they appear

Assignable           : 6 7
Instruction          : 2 3
InstructionList      : 1 2
Ls_rules             : 8 9
Lsystem_body         : 5
Program              : 0

Parsing method: LALR

state 0

    (0) S' -> . Program
    (1) Program -> . InstructionList
    (2) InstructionList -> . Instruction END InstructionList
    (3) InstructionList -> . Instruction END
    (5) Instruction -> . LSYS ID LBRACE Lsystem_body RBRACE
    (6) Instruction -> . ID EQUAL Assignable
    (7) Instruction -> . TYPE ID EQUAL Assignable

    LSYS            shift and go to state 4
    ID              shift and go to state 5
    TYPE            shift and go to state 6

    Program                        shift and go to state 1
    InstructionList                shift and go to state 2
    Instruction                    shift and go to state 3

state 1

    (0) S' -> Program .



state 2

    (1) Program -> InstructionList .

    $end            reduce using rule 1 (Program -> InstructionList .)


state 3

    (2) InstructionList -> Instruction . END InstructionList
    (3) InstructionList -> Instruction . END

    END             shift and go to state 7


state 4

    (5) Instruction -> LSYS . ID LBRACE Lsystem_body RBRACE

    ID              shift and go to state 8


state 5

    (6) Instruction -> ID . EQUAL Assignable

    EQUAL           shift and go to state 9


state 6

    (7) Instruction -> TYPE . ID EQUAL Assignable

    ID              shift and go to state 10


state 7

    (2) InstructionList -> Instruction END . InstructionList
    (3) InstructionList -> Instruction END .
    (2) InstructionList -> . Instruction END InstructionList
    (3) InstructionList -> . Instruction END
    (5) Instruction -> . LSYS ID LBRACE Lsystem_body RBRACE
    (6) Instruction -> . ID EQUAL Assignable
    (7) Instruction -> . TYPE ID EQUAL Assignable

    $end            reduce using rule 3 (InstructionList -> Instruction END .)
    LSYS            shift and go to state 4
    ID              shift and go to state 5
    TYPE            shift and go to state 6

    Instruction                    shift and go to state 3
    InstructionList                shift and go to state 11

state 8

    (5) Instruction -> LSYS ID . LBRACE Lsystem_body RBRACE

    LBRACE          shift and go to state 12


state 9

    (6) Instruction -> ID EQUAL . Assignable
    (4) Assignable -> . VALUE

    VALUE           shift and go to state 14

    Assignable                     shift and go to state 13

state 10

    (7) Instruction -> TYPE ID . EQUAL Assignable

    EQUAL           shift and go to state 15


state 11

    (2) InstructionList -> Instruction END InstructionList .

    $end            reduce using rule 2 (InstructionList -> Instruction END InstructionList .)


state 12

    (5) Instruction -> LSYS ID LBRACE . Lsystem_body RBRACE
    (8) Lsystem_body -> . AXIOM TWOPOINTS STRING COMMA Ls_rules

    AXIOM           shift and go to state 17

    Lsystem_body                   shift and go to state 16

state 13

    (6) Instruction -> ID EQUAL Assignable .

    END             reduce using rule 6 (Instruction -> ID EQUAL Assignable .)


state 14

    (4) Assignable -> VALUE .

    END             reduce using rule 4 (Assignable -> VALUE .)


state 15

    (7) Instruction -> TYPE ID EQUAL . Assignable
    (4) Assignable -> . VALUE

    VALUE           shift and go to state 14

    Assignable                     shift and go to state 18

state 16

    (5) Instruction -> LSYS ID LBRACE Lsystem_body . RBRACE

    RBRACE          shift and go to state 19


state 17

    (8) Lsystem_body -> AXIOM . TWOPOINTS STRING COMMA Ls_rules

    TWOPOINTS       shift and go to state 20


state 18

    (7) Instruction -> TYPE ID EQUAL Assignable .

    END             reduce using rule 7 (Instruction -> TYPE ID EQUAL Assignable .)


state 19

    (5) Instruction -> LSYS ID LBRACE Lsystem_body RBRACE .

    END             reduce using rule 5 (Instruction -> LSYS ID LBRACE Lsystem_body RBRACE .)


state 20

    (8) Lsystem_body -> AXIOM TWOPOINTS . STRING COMMA Ls_rules

    STRING          shift and go to state 21


state 21

    (8) Lsystem_body -> AXIOM TWOPOINTS STRING . COMMA Ls_rules

    COMMA           shift and go to state 22


state 22

    (8) Lsystem_body -> AXIOM TWOPOINTS STRING COMMA . Ls_rules
    (9) Ls_rules -> . STRING ARROW STRING COMMA Ls_rules
    (10) Ls_rules -> . STRING ARROW STRING

    STRING          shift and go to state 23

    Ls_rules                       shift and go to state 24

state 23

    (9) Ls_rules -> STRING . ARROW STRING COMMA Ls_rules
    (10) Ls_rules -> STRING . ARROW STRING

    ARROW           shift and go to state 25


state 24

    (8) Lsystem_body -> AXIOM TWOPOINTS STRING COMMA Ls_rules .

    RBRACE          reduce using rule 8 (Lsystem_body -> AXIOM TWOPOINTS STRING COMMA Ls_rules .)


state 25

    (9) Ls_rules -> STRING ARROW . STRING COMMA Ls_rules
    (10) Ls_rules -> STRING ARROW . STRING

    STRING          shift and go to state 26


state 26

    (9) Ls_rules -> STRING ARROW STRING . COMMA Ls_rules
    (10) Ls_rules -> STRING ARROW STRING .

    COMMA           shift and go to state 27
    RBRACE          reduce using rule 10 (Ls_rules -> STRING ARROW STRING .)


state 27

    (9) Ls_rules -> STRING ARROW STRING COMMA . Ls_rules
    (9) Ls_rules -> . STRING ARROW STRING COMMA Ls_rules
    (10) Ls_rules -> . STRING ARROW STRING

    STRING          shift and go to state 23

    Ls_rules                       shift and go to state 28

state 28

    (9) Ls_rules -> STRING ARROW STRING COMMA Ls_rules .

    RBRACE          reduce using rule 9 (Ls_rules -> STRING ARROW STRING COMMA Ls_rules .)

