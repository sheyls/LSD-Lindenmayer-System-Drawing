Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    ANGLE
    BREAK
    BRUSH
    CANVAS
    COLOR
    DIFFER
    DRAW
    ELSE
    EQUAL
    EQUALEQUAL
    FALSE
    FLOAT
    GEQUAL
    GREATER
    IF
    INT
    LCOR
    LEFT
    LEQUAL
    LESS
    LINE
    LPAREN
    MINUS
    MULTIPLY
    NILL
    NOT
    OR
    PLUS
    POP
    PUSH
    RCOR
    RIGHT
    RPAREN
    RULE
    TRUE
    WHILE

Grammar

Rule 0     S' -> Program
Rule 1     Program -> InstructionList
Rule 2     InstructionList -> Instruction END InstructionList
Rule 3     InstructionList -> Instruction END
Rule 4     Instruction -> LSYS ID LBRACE Lsystem_body RBRACE
Rule 5     Lsystem_body -> AXIOM TWOPOINTS STRING COMMA Ls_rules
Rule 6     Ls_rules -> STRING ARROW STRING COMMA Ls_rules
Rule 7     Ls_rules -> STRING ARROW STRING

Terminals, with rules where they appear

AND                  : 
ANGLE                : 
ARROW                : 6 7
AXIOM                : 5
BREAK                : 
BRUSH                : 
CANVAS               : 
COLOR                : 
COMMA                : 5 6
DIFFER               : 
DRAW                 : 
ELSE                 : 
END                  : 2 3
EQUAL                : 
EQUALEQUAL           : 
FALSE                : 
FLOAT                : 
GEQUAL               : 
GREATER              : 
ID                   : 4
IF                   : 
INT                  : 
LBRACE               : 4
LCOR                 : 
LEFT                 : 
LEQUAL               : 
LESS                 : 
LINE                 : 
LPAREN               : 
LSYS                 : 4
MINUS                : 
MULTIPLY             : 
NILL                 : 
NOT                  : 
OR                   : 
PLUS                 : 
POP                  : 
PUSH                 : 
RBRACE               : 4
RCOR                 : 
RIGHT                : 
RPAREN               : 
RULE                 : 
STRING               : 5 6 6 7 7
TRUE                 : 
TWOPOINTS            : 5
WHILE                : 
error                : 

Nonterminals, with rules where they appear

Instruction          : 2 3
InstructionList      : 1 2
Ls_rules             : 5 6
Lsystem_body         : 4
Program              : 0

Parsing method: LALR

state 0

    (0) S' -> . Program
    (1) Program -> . InstructionList
    (2) InstructionList -> . Instruction END InstructionList
    (3) InstructionList -> . Instruction END
    (4) Instruction -> . LSYS ID LBRACE Lsystem_body RBRACE

    LSYS            shift and go to state 4

    Program                        shift and go to state 1
    InstructionList                shift and go to state 2
    Instruction                    shift and go to state 3

state 1

    (0) S' -> Program .



state 2

    (1) Program -> InstructionList .

    $end            reduce using rule 1 (Program -> InstructionList .)


state 3

    (2) InstructionList -> Instruction . END InstructionList
    (3) InstructionList -> Instruction . END

    END             shift and go to state 5


state 4

    (4) Instruction -> LSYS . ID LBRACE Lsystem_body RBRACE

    ID              shift and go to state 6


state 5

    (2) InstructionList -> Instruction END . InstructionList
    (3) InstructionList -> Instruction END .
    (2) InstructionList -> . Instruction END InstructionList
    (3) InstructionList -> . Instruction END
    (4) Instruction -> . LSYS ID LBRACE Lsystem_body RBRACE

    $end            reduce using rule 3 (InstructionList -> Instruction END .)
    LSYS            shift and go to state 4

    Instruction                    shift and go to state 3
    InstructionList                shift and go to state 7

state 6

    (4) Instruction -> LSYS ID . LBRACE Lsystem_body RBRACE

    LBRACE          shift and go to state 8


state 7

    (2) InstructionList -> Instruction END InstructionList .

    $end            reduce using rule 2 (InstructionList -> Instruction END InstructionList .)


state 8

    (4) Instruction -> LSYS ID LBRACE . Lsystem_body RBRACE
    (5) Lsystem_body -> . AXIOM TWOPOINTS STRING COMMA Ls_rules

    AXIOM           shift and go to state 10

    Lsystem_body                   shift and go to state 9

state 9

    (4) Instruction -> LSYS ID LBRACE Lsystem_body . RBRACE

    RBRACE          shift and go to state 11


state 10

    (5) Lsystem_body -> AXIOM . TWOPOINTS STRING COMMA Ls_rules

    TWOPOINTS       shift and go to state 12


state 11

    (4) Instruction -> LSYS ID LBRACE Lsystem_body RBRACE .

    END             reduce using rule 4 (Instruction -> LSYS ID LBRACE Lsystem_body RBRACE .)


state 12

    (5) Lsystem_body -> AXIOM TWOPOINTS . STRING COMMA Ls_rules

    STRING          shift and go to state 13


state 13

    (5) Lsystem_body -> AXIOM TWOPOINTS STRING . COMMA Ls_rules

    COMMA           shift and go to state 14


state 14

    (5) Lsystem_body -> AXIOM TWOPOINTS STRING COMMA . Ls_rules
    (6) Ls_rules -> . STRING ARROW STRING COMMA Ls_rules
    (7) Ls_rules -> . STRING ARROW STRING

    STRING          shift and go to state 15

    Ls_rules                       shift and go to state 16

state 15

    (6) Ls_rules -> STRING . ARROW STRING COMMA Ls_rules
    (7) Ls_rules -> STRING . ARROW STRING

    ARROW           shift and go to state 17


state 16

    (5) Lsystem_body -> AXIOM TWOPOINTS STRING COMMA Ls_rules .

    RBRACE          reduce using rule 5 (Lsystem_body -> AXIOM TWOPOINTS STRING COMMA Ls_rules .)


state 17

    (6) Ls_rules -> STRING ARROW . STRING COMMA Ls_rules
    (7) Ls_rules -> STRING ARROW . STRING

    STRING          shift and go to state 18


state 18

    (6) Ls_rules -> STRING ARROW STRING . COMMA Ls_rules
    (7) Ls_rules -> STRING ARROW STRING .

    COMMA           shift and go to state 19
    RBRACE          reduce using rule 7 (Ls_rules -> STRING ARROW STRING .)


state 19

    (6) Ls_rules -> STRING ARROW STRING COMMA . Ls_rules
    (6) Ls_rules -> . STRING ARROW STRING COMMA Ls_rules
    (7) Ls_rules -> . STRING ARROW STRING

    STRING          shift and go to state 15

    Ls_rules                       shift and go to state 20

state 20

    (6) Ls_rules -> STRING ARROW STRING COMMA Ls_rules .

    RBRACE          reduce using rule 6 (Ls_rules -> STRING ARROW STRING COMMA Ls_rules .)

